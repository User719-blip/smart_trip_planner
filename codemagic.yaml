workflows:
  android-workflow:
    name: Android Workflow
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Clean project
        script: flutter clean
        
      - name: Get Flutter packages
        script: flutter pub get
        
      - name: Setup Android build environment
        script: |
          echo "=== Setting up Android build environment ==="
          cd android
          
          # Remove existing problematic files
          rm -f build.gradle.kts settings.gradle.kts app/build.gradle.kts
          rm -f gradlew gradlew.bat
          rm -rf gradle/
          
          # Create gradle wrapper directory
          mkdir -p gradle/wrapper
          
          # Create gradle-wrapper.properties
          cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.5-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          # Create gradlew script
          cat > gradlew << 'EOF'
          #!/bin/sh
          
          ##############################################################################
          # Gradle start up script for UN*X
          ##############################################################################
          
          # Attempt to set APP_HOME
          PRG="$0"
          while [ -h "$PRG" ] ; do
              ls=`ls -ld "$PRG"`
              link=`expr "$ls" : '.*-> \(.*\)$'`
              if expr "$link" : '/.*' > /dev/null; then
                  PRG="$link"
              else
                  PRG=`dirname "$PRG"`"/$link"
              fi
          done
          SAVED="`pwd`"
          cd "`dirname \"$PRG\"`/" >/dev/null
          APP_HOME="`pwd -P`"
          cd "$SAVED" >/dev/null
          
          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`
          DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
          MAX_FD="maximum"
          
          warn () {
              echo "$*"
          }
          
          die () {
              echo
              echo "$*"
              echo
              exit 1
          }
          
          case "`uname`" in
            CYGWIN* )
              cygwin=true
              ;;
            Darwin* )
              darwin=true
              ;;
            MINGW* )
              msys=true
              ;;
            NONSTOP* )
              nonstop=true
              ;;
          esac
          
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          
          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              else
                  JAVACMD="$JAVA_HOME/bin/java"
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
          fi
          
          if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
              MAX_FD_LIMIT=`ulimit -H -n`
              if [ $? -eq 0 ] ; then
                  if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
                      MAX_FD="$MAX_FD_LIMIT"
                  fi
                  ulimit -n $MAX_FD
                  if [ $? -ne 0 ] ; then
                      warn "Could not set maximum file descriptor limit: $MAX_FD"
                  fi
              else
                  warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
              fi
          fi
          
          if [ "$darwin" = "true" ] ; then
              GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
          fi
          
          if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
              APP_HOME=`cygpath --path --mixed "$APP_HOME"`
              CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
              JAVACMD=`cygpath --unix "$JAVACMD"`
          fi
          
          exec "$JAVACMD" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$@"
          EOF
          
          # Make gradlew executable
          chmod +x gradlew
          
          # Download gradle-wrapper.jar
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.5.0/gradle/wrapper/gradle-wrapper.jar
          
          # Create root build.gradle
          cat > build.gradle << 'EOF'
          buildscript {
              ext.kotlin_version = '1.8.22'
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.1.4'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "${rootProject.buildDir}/${project.name}"
          }
          subprojects {
              project.evaluationDependsOn(':app')
          }
          
          tasks.register("clean", Delete) {
              delete rootProject.buildDir
          }
          EOF
          
          # Create settings.gradle
          cat > settings.gradle << 'EOF'
          pluginManagement {
              def flutterSdkPath = {
                  def properties = new Properties()
                  file("local.properties").withInputStream { properties.load(it) }
                  def flutterSdkPath = properties.getProperty("flutter.sdk")
                  assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
                  return flutterSdkPath
              }()
          
              includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")
          
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }
          
          plugins {
              id "dev.flutter.flutter-plugin-loader" version "1.0.0"
              id "com.android.application" version "8.1.4" apply false
              id "org.jetbrains.kotlin.android" version "1.8.22" apply false
          }
          workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Clean project
        script: |
          echo "=== Cleaning project ==="
          flutter clean
          
      - name: Get Flutter packages
        script: |
          echo "=== Getting Flutter packages ==="
          flutter pub get
        
      - name: Create minimal Android setup
        script: |
          echo "=== Creating minimal Android setup ==="
          
          # Remove problematic files
          rm -f android/build.gradle.kts android/settings.gradle.kts android/app/build.gradle.kts
          
          # Create minimal build.gradle (root)
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext.kotlin_version = '1.7.10'
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.4.2'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "${rootProject.buildDir}/${project.name}"
          }
          subprojects {
              project.evaluationDependsOn(':app')
          }
          
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF
          
          # Create minimal settings.gradle
          cat > android/settings.gradle << 'EOF'
          include ':app'
          
          def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
          def properties = new Properties()
          
          assert localPropertiesFile.exists()
          localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
          
          def flutterSdkPath = properties.getProperty("flutter.sdk")
          assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
          apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
          EOF
          
          # Create minimal app/build.gradle
          cat > android/app/build.gradle << 'EOF'
          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }
          
          def flutterRoot = localProperties.getProperty('flutter.sdk')
          if (flutterRoot == null) {
              throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
          }
          
          def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
          if (flutterVersionCode == null) {
              flutterVersionCode = '1'
          }
          
          def flutterVersionName = localProperties.getProperty('flutter.versionName')
          if (flutterVersionName == null) {
              flutterVersionName = '1.0'
          }
          
          apply plugin: 'com.android.application'
          apply plugin: 'kotlin-android'
          apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
          
          android {
              compileSdkVersion 34
              ndkVersion flutter.ndkVersion
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          
              kotlinOptions {
                  jvmTarget = '1.8'
              }
          
              sourceSets {
                  main.java.srcDirs += 'src/main/kotlin'
              }
          
              defaultConfig {
                  applicationId "com.example.smart_trip_planner"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode flutterVersionCode.toInteger()
                  versionName flutterVersionName
              }
          
              buildTypes {
                  release {
                      signingConfig signingConfigs.debug
                      minifyEnabled false
                      shrinkResources false
                  }
              }
          }
          
          flutter {
              source '../..'
          }
          
          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
          }
          EOF
          
          echo "=== Android setup complete ==="
          
      - name: Generate Isar files
        script: |
          echo "=== Generating Isar schema files ==="
          flutter packages pub run build_runner build --delete-conflicting-outputs || echo "Build runner failed, continuing..."
        
      - name: Build APK
        script: |
          echo "=== Building APK ==="
          flutter build apk --debug --verbose
          
      - name: Find and copy APK
        script: |
          echo "=== Looking for APK files ==="
          find . -name "*.apk" -type f
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Look for APK in multiple locations
          if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            cp "android/app/build/outputs/apk/debug/app-debug.apk" artifacts/
            echo "✅ Debug APK copied!"
          elif [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
            cp "android/app/build/outputs/apk/release/app-release.apk" artifacts/
            echo "✅ Release APK copied!"
          else
            echo "❌ No APK found in expected locations"
            echo "Checking all possible locations:"
            find android -name "*.apk" -type f | head -10
            
            # Copy any APK we find
            APK_FILE=$(find android -name "*.apk" -type f | head -1)
            if [ -n "$APK_FILE" ]; then
              cp "$APK_FILE" artifacts/app.apk
              echo "✅ APK copied from: $APK_FILE"
            else
              echo "❌ No APK files found anywhere"
              exit 1
            fi
          fi
          
          echo "Final artifacts:"
          ls -la artifacts/
          
    artifacts:
      - artifacts/*.apk
          include ":app"
          EOF
          
          # Create app/build.gradle
          cat > app/build.gradle << 'EOF'
          plugins {
              id "com.android.application"
              id "kotlin-android"
              id "dev.flutter.flutter-gradle-plugin"
          }
          
          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }
          
          def flutterRoot = localProperties.getProperty('flutter.sdk')
          if (flutterRoot == null) {
              throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
          }
          
          android {
              namespace "com.example.smart_trip_planner"
              compileSdk 34
              ndkVersion "25.1.8937393"
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          
              kotlinOptions {
                  jvmTarget = '1.8'
              }
          
              defaultConfig {
                  applicationId "com.example.smart_trip_planner"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode 1
                  versionName "1.0"
              }
              
              signingConfigs {
                  debug {
                      storeFile file('debug.keystore')
                      storePassword 'android'
                      keyAlias 'androiddebugkey'
                      keyPassword 'android'
                  }
              }
          
              buildTypes {
                  debug {
                      minifyEnabled false
                      shrinkResources false
                      debuggable true
                      signingConfig signingConfigs.debug
                  }
                  release {
                      minifyEnabled false
                      shrinkResources false
                      debuggable false
                      signingConfig signingConfigs.debug
                  }
              }
          }
          
          flutter {
              source '../..'
          }
          
          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.22"
          }
          EOF
          
          # Create debug keystore
          cd app
          keytool -genkey -v -keystore debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US" -noprompt
          
          cd ..
          echo "=== Android environment setup complete ==="
        
      - name: Generate Isar files
        script: |
          echo "=== Generating Isar schema files ==="
          flutter packages pub run build_runner build --delete-conflicting-outputs
        
      - name: Debug Gradle build directly
        script: |
          echo "=== Running Gradle build directly to see detailed errors ==="
          cd android
          ./gradlew assembleRelease --stacktrace --info --warning-mode all 2>&1 | tee gradle_build.log
          echo "=== Gradle build completed ==="
          
      - name: Try Flutter build with more debug info
        script: |
          echo "=== Trying Flutter build with debug info ==="
          flutter build apk --release --verbose 2>&1 | tee flutter_build.log
          echo "=== Build attempt completed ==="
          
      - name: Show build logs
        script: |
          echo "=== Showing Gradle build log ==="
          if [ -f android/gradle_build.log ]; then
            echo "Last 100 lines of Gradle build:"
            tail -100 android/gradle_build.log
          fi
          
          echo "=== Showing Flutter build log ==="
          if [ -f flutter_build.log ]; then
            echo "Last 100 lines of Flutter build:"
            tail -100 flutter_build.log
          fi
          
          echo "=== Checking for any APK files ==="
          find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
          
          echo "=== Checking build directory structure ==="
          ls -la android/app/build/outputs/ 2>/dev/null || echo "No build outputs directory"
          
    artifacts:
      - android/gradle_build.log
      - flutter_build.log
      - artifacts/*.apk