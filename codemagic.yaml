workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Clean project
        script: |
          echo "=== Cleaning project ==="
          flutter clean
          
      - name: Get Flutter packages
        script: |
          echo "=== Getting Flutter packages ==="
          flutter pub get
        
      - name: Create minimal Android setup
        script: |
          echo "=== Creating minimal Android setup ==="
          
          # Remove problematic files
          rm -f android/build.gradle.kts android/settings.gradle.kts android/app/build.gradle.kts
          
          # Create minimal build.gradle (root)
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext.kotlin_version = '1.7.10'
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.4.2'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "${rootProject.buildDir}/${project.name}"
          }
          subprojects {
              project.evaluationDependsOn(':app')
          }
          
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF
          
          # Create minimal settings.gradle
          cat > android/settings.gradle << 'EOF'
          include ':app'
          
          def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
          def properties = new Properties()
          
          assert localPropertiesFile.exists()
          localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
          
          def flutterSdkPath = properties.getProperty("flutter.sdk")
          assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
          apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
          EOF
          
          # Create minimal app/build.gradle
          cat > android/app/build.gradle << 'EOF'
          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }
          
          def flutterRoot = localProperties.getProperty('flutter.sdk')
          if (flutterRoot == null) {
              throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
          }
          
          def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
          if (flutterVersionCode == null) {
              flutterVersionCode = '1'
          }
          
          def flutterVersionName = localProperties.getProperty('flutter.versionName')
          if (flutterVersionName == null) {
              flutterVersionName = '1.0'
          }
          
          apply plugin: 'com.android.application'
          apply plugin: 'kotlin-android'
          apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
          
          android {
              compileSdkVersion 34
              ndkVersion flutter.ndkVersion
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          
              kotlinOptions {
                  jvmTarget = '1.8'
              }
          
              sourceSets {
                  main.java.srcDirs += 'src/main/kotlin'
              }
          
              defaultConfig {
                  applicationId "com.example.smart_trip_planner"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode flutterVersionCode.toInteger()
                  versionName flutterVersionName
              }
          
              buildTypes {
                  release {
                      signingConfig signingConfigs.debug
                      minifyEnabled false
                      shrinkResources false
                  }
              }
          }
          
          flutter {
              source '../..'
          }
          
          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
          }
          EOF
          
          echo "=== Android setup complete ==="
          
      - name: Generate Isar files
        script: |
          echo "=== Generating Isar schema files ==="
          flutter packages pub run build_runner build --delete-conflicting-outputs || echo "Build runner failed, continuing..."
        
      - name: Build APK
        script: |
          echo "=== Building APK ==="
          flutter build apk --debug --verbose
          
      - name: Find and copy APK
        script: |
          echo "=== Looking for APK files ==="
          find . -name "*.apk" -type f
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Look for APK in multiple locations
          if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            cp "android/app/build/outputs/apk/debug/app-debug.apk" artifacts/
            echo "✅ Debug APK copied!"
          elif [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
            cp "android/app/build/outputs/apk/release/app-release.apk" artifacts/
            echo "✅ Release APK copied!"
          else
            echo "❌ No APK found in expected locations"
            echo "Checking all possible locations:"
            find android -name "*.apk" -type f | head -10
            
            # Copy any APK we find
            APK_FILE=$(find android -name "*.apk" -type f | head -1)
            if [ -n "$APK_FILE" ]; then
              cp "$APK_FILE" artifacts/app.apk
              echo "✅ APK copied from: $APK_FILE"
            else
              echo "❌ No APK files found anywhere"
              exit 1
            fi
          fi
          
          echo "Final artifacts:"
          ls -la artifacts/
          
    artifacts:
      - artifacts/*.apk