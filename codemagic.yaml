workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Clean project
        script: |
          echo "=== Cleaning project ==="
          flutter clean
          
      - name: Get Flutter packages
        script: |
          echo "=== Getting Flutter packages ==="
          flutter pub get
        
      - name: Generate Isar files (if needed)
        script: |
          echo "=== Checking for build_runner dependency ==="
          if grep -q "build_runner" pubspec.yaml; then
            echo "Found build_runner, generating files..."
            flutter packages pub run build_runner build --delete-conflicting-outputs
          else
            echo "No build_runner dependency found, skipping code generation"
          fi
        
      - name: Verify Android configuration
        script: |
          echo "=== Verifying Android configuration ==="
          
          # Check if Android directory exists
          if [ ! -d "android" ]; then
            echo "❌ Android directory missing!"
            exit 1
          fi
          
          # Check critical Android files
          echo "Checking Android files:"
          ls -la android/
          ls -la android/app/
          
          # Verify gradle wrapper
          if [ ! -f "android/gradlew" ]; then
            echo "Creating gradle wrapper..."
            cd android
            gradle wrapper --gradle-version 7.6.3
            chmod +x gradlew
            cd ..
          fi
          
      - name: Fix Android Gradle files
        script: |
          echo "=== Fixing Android Gradle configuration ==="
          
          # Only create files if they don't exist or are problematic
          cd android
          
          # Check and fix root build.gradle
          if [ ! -f "build.gradle" ] || grep -q "buildscript.*{.*}" build.gradle; then
            echo "Creating/fixing root build.gradle"
            cat > build.gradle << 'EOF'
          buildscript {
              ext.kotlin_version = '1.7.10'
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.4.2'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "${rootProject.buildDir}/${project.name}"
          }
          subprojects {
              project.evaluationDependsOn(':app')
          }
          
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF
          fi
          
          # Check and fix settings.gradle
          if [ ! -f "settings.gradle" ]; then
            echo "Creating settings.gradle"
            cat > settings.gradle << 'EOF'
          include ':app'
          
          def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
          def properties = new Properties()
          
          assert localPropertiesFile.exists()
          localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
          
          def flutterSdkPath = properties.getProperty("flutter.sdk")
          assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
          apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
          EOF
          fi
          
          cd ..
          
      - name: Validate Flutter project
        script: |
          echo "=== Validating Flutter project ==="
          
          # Check pubspec.yaml
          if [ ! -f "pubspec.yaml" ]; then
            echo "❌ pubspec.yaml not found!"
            exit 1
          fi
          
          # Verify Flutter can analyze the project
          flutter analyze --no-fatal-infos || echo "Analysis completed with warnings"
          
          # Check for common issues
          echo "=== Checking for common issues ==="
          if grep -r "import.*dart:html" lib/; then
            echo "⚠️  Warning: Found web-specific imports in lib/"
          fi
          
      - name: Build APK with detailed logging
        script: |
          echo "=== Building APK with Flutter ==="
          
          # Set environment variables for better error reporting
          export FLUTTER_BUILD_MODE=debug
          export GRADLE_OPTS="-Xmx4g -XX:MaxPermSize=512m"
          
          # Try Flutter build first (preferred method)
          echo "Attempting Flutter build..."
          if flutter build apk --debug --verbose --no-shrink 2>&1 | tee flutter_build.log; then
            echo "✅ Flutter build succeeded!"
          else
            echo "❌ Flutter build failed, trying direct Gradle build..."
            
            # Fallback to direct Gradle build
            cd android
            echo "Building with Gradle directly..."
            ./gradlew assembleDebug --stacktrace --info 2>&1 | tee ../gradle_build.log
            cd ..
          fi
          
      - name: Locate and verify APK
        script: |
          echo "=== Locating APK files ==="
          
          # Search for APK files
          APK_FILES=$(find . -name "*.apk" -type f)
          
          if [ -n "$APK_FILES" ]; then
            echo "✅ Found APK files:"
            echo "$APK_FILES"
            
            # Create artifacts directory
            mkdir -p artifacts
            
            # Copy the main APK
            MAIN_APK=$(echo "$APK_FILES" | grep -E "(app-debug|app-release)" | head -1)
            if [ -n "$MAIN_APK" ]; then
              cp "$MAIN_APK" artifacts/app-debug.apk
              echo "✅ Main APK copied: $MAIN_APK"
            else
              # Copy any APK found
              FIRST_APK=$(echo "$APK_FILES" | head -1)
              cp "$FIRST_APK" artifacts/app-debug.apk
              echo "✅ APK copied: $FIRST_APK"
            fi
            
            # Show APK details
            ls -la artifacts/
            echo "APK size: $(du -h artifacts/app-debug.apk | cut -f1)"
            
          else
            echo "❌ No APK files found!"
            echo "=== Debugging information ==="
            
            # Show build directory structure
            echo "Build directory contents:"
            find . -name "build" -type d -exec ls -la {} \; 2>/dev/null || echo "No build directories found"
            
            # Show detailed error logs
            if [ -f flutter_build.log ]; then
              echo "=== Flutter build errors ==="
              grep -i "error\|exception\|failed" flutter_build.log | tail -10
            fi
            
            if [ -f gradle_build.log ]; then
              echo "=== Gradle build errors ==="
              grep -i "error\|exception\|failed" gradle_build.log | tail -10
            fi
            
            exit 1
          fi
          
    artifacts:
      - artifacts/*.apk
      - "*.log"