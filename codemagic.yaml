workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Fix Isar compatibility with Android Gradle Plugin
        script: |
          echo "Fixing Android Gradle Plugin version for Isar compatibility..."
          
          # Fix gradle.properties first
          if [ -f "android/gradle.properties" ]; then
            echo "Original gradle.properties:"
            cat android/gradle.properties
            
            # Remove the deprecated line
            grep -v "android.enableR8" android/gradle.properties > android/gradle.properties.tmp
            mv android/gradle.properties.tmp android/gradle.properties
            
            echo "Fixed gradle.properties:"
            cat android/gradle.properties
          fi
          
          # Downgrade Android Gradle Plugin for Isar compatibility
          echo "Updating build.gradle for Isar compatibility..."
          
          # Update root build.gradle
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext.kotlin_version = '1.8.10'
              repositories {
                  google()
                  mavenCentral()
              }
          
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.4.2'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF
          
          # Update settings.gradle for AGP 7.x
          cat > android/settings.gradle << 'EOF'
          include ':app'
          
          def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
          def properties = new Properties()
          
          assert localPropertiesFile.exists()
          localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
          
          def flutterSdkPath = properties.getProperty("flutter.sdk")
          assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
          apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
          EOF
          
          # Update app/build.gradle to remove namespace (not needed in AGP 7.x)
          cat > android/app/build.gradle << 'EOF'
          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }
          
          def flutterRoot = localProperties.getProperty('flutter.sdk')
          if (flutterRoot == null) {
              throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
          }
          
          apply plugin: 'com.android.application'
          apply plugin: 'kotlin-android'
          apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
          
          android {
              compileSdkVersion 34
              ndkVersion "25.1.8937393"
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          
              kotlinOptions {
                  jvmTarget = '1.8'
              }
          
              defaultConfig {
                  applicationId "com.example.smart_trip_planner"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode 1
                  versionName "1.0"
                  
                  ndk {
                      abiFilters 'armeabi-v7a', 'arm64-v8a'
                  }
              }
          
              signingConfigs {
                  debug {
                      storeFile file('debug.keystore')
                      storePassword 'android'
                      keyAlias 'androiddebugkey'
                      keyPassword 'android'
                  }
                  release {
                      storeFile file('debug.keystore')
                      storePassword 'android'
                      keyAlias 'androiddebugkey'
                      keyPassword 'android'
                  }
              }
          
              buildTypes {
                  debug {
                      minifyEnabled false
                      shrinkResources false
                      debuggable true
                      signingConfig signingConfigs.debug
                  }
                  release {
                      minifyEnabled false
                      shrinkResources false
                      debuggable false
                      signingConfig signingConfigs.release
                  }
              }
          }
          
          flutter {
              source '../..'
          }
          
          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
              implementation 'androidx.core:core-ktx:1.8.0'
          }
          EOF
          
          # Update gradle wrapper to compatible version
          echo "distributionBase=GRADLE_USER_HOME" > android/gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> android/gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\\://services.gradle.org/distributions/gradle-7.6.3-all.zip" >> android/gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> android/gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> android/gradle/wrapper/gradle-wrapper.properties
          
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
          
      - name: Get Flutter packages
        script: |
          flutter pub get
          
      - name: Generate code if needed (Isar, build_runner)
        script: |
          if grep -q "build_runner" pubspec.yaml; then
            echo "Running build_runner for code generation..."
            flutter packages pub run build_runner build --delete-conflicting-outputs
          else
            echo "No build_runner dependency found, skipping code generation"
          fi
          
      - name: Flutter analyze
        script: |
          flutter analyze --no-fatal-infos
        ignore_failure: true
          
      - name: Flutter unit tests
        script: |
          flutter test
        ignore_failure: true
        
      - name: Build debug APK
        script: |
          flutter build apk --debug
          
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
      
    publishing:
      email:
        recipients:
          - your-iamfake1815@gmail.com
        notify:
          success: true
          failure: true