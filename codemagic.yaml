workflows:
  android-workflow:
    name: Android Workflow
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Clean project
        script: flutter clean
        
      - name: Get Flutter packages
        script: flutter pub get
        
      - name: Setup Android build environment
        script: |
          echo "=== Setting up Android build environment ==="
          cd android
          
          # Remove existing problematic files
          rm -f build.gradle.kts settings.gradle.kts app/build.gradle.kts
          rm -f gradlew gradlew.bat
          rm -rf gradle/
          
          # Create gradle wrapper directory
          mkdir -p gradle/wrapper
          
          # Create gradle-wrapper.properties
          cat > gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.5-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          # Create gradlew script with proper content
          cat > gradlew << 'EOF'
          #!/bin/sh
          
          ##############################################################################
          # Gradle start up script for UN*X
          ##############################################################################
          
          # Attempt to set APP_HOME
          # Resolve links: $0 may be a link
          PRG="$0"
          # Need this for relative symlinks.
          while [ -h "$PRG" ] ; do
              ls=`ls -ld "$PRG"`
              link=`expr "$ls" : '.*-> \(.*\)$'`
              if expr "$link" : '/.*' > /dev/null; then
                  PRG="$link"
              else
                  PRG=`dirname "$PRG"`"/$link"
              fi
          done
          SAVED="`pwd`"
          cd "`dirname \"$PRG\"`/" >/dev/null
          APP_HOME="`pwd -P`"
          cd "$SAVED" >/dev/null
          
          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`
          
          # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
          DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
          
          # Use the maximum available, or set MAX_FD != -1 to use that value.
          MAX_FD="maximum"
          
          warn () {
              echo "$*"
          }
          
          die () {
              echo
              echo "$*"
              echo
              exit 1
          }
          
          # OS specific support (must be 'true' or 'false').
          cygwin=false
          msys=false
          darwin=false
          nonstop=false
          case "`uname`" in
            CYGWIN* )
              cygwin=true
              ;;
            Darwin* )
              darwin=true
              ;;
            MINGW* )
              msys=true
              ;;
            NONSTOP* )
              nonstop=true
              ;;
          esac
          
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          
          # Determine the Java command to use to start the JVM.
          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  # IBM's JDK on AIX uses strange locations for the executables
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              else
                  JAVACMD="$JAVA_HOME/bin/java"
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
          
          Please set the JAVA_HOME variable in your environment to match the
          location of your Java installation."
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
          
          Please set the JAVA_HOME variable in your environment to match the
          location of your Java installation."
          fi
          
          # Increase the maximum file descriptors if we can.
          if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
              MAX_FD_LIMIT=`ulimit -H -n`
              if [ $? -eq 0 ] ; then
                  if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
                      MAX_FD="$MAX_FD_LIMIT"
                  fi
                  ulimit -n $MAX_FD
                  if [ $? -ne 0 ] ; then
                      warn "Could not set maximum file descriptor limit: $MAX_FD"
                  fi
              else
                  warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
              fi
          fi
          
          # For Darwin, add options to specify how the application appears in the dock
          if [ "$darwin" = "true" ] ; then
              GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
          fi
          
          # For Cygwin or MSYS, switch paths to Windows format before running java
          if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
              APP_HOME=`cygpath --path --mixed "$APP_HOME"`
              CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
              
              JAVACMD=`cygpath --unix "$JAVACMD"`
          
              # We build the pattern for arguments to be converted via cygpath
              ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
              SEP=""
              for dir in $ROOTDIRSRAW ; do
                  ROOTDIRS="$ROOTDIRS$SEP$dir"
                  SEP="|"
              done
              OURCYGPATTERN="(^($ROOTDIRS))"
              # Add a user-defined pattern to the cygpath arguments
              if [ "$GRADLE_CYGPATTERN" != "" ] ; then
                  OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
              fi
              # Now convert the arguments - kludge to limit ourselves to /bin/sh
              i=0
              for arg in "$@" ; do
                  CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
                  CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
          
                  if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
                      eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
                  else
                      eval `echo args$i`="\"$arg\""
                  fi
                  i=`expr $i + 1`
              done
              case $i in
                  0) set -- ;;
                  1) set -- "$args0" ;;
                  2) set -- "$args0" "$args1" ;;
                  3) set -- "$args0" "$args1" "$args2" ;;
                  4) set -- "$args0" "$args1" "$args2" "$args3" ;;
                  5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
                  6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
                  7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
                  8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
                  9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
              esac
          fi
          
          # Escape application args
          save () {
              for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
              echo " "
          }
          APP_ARGS=`save "$@"`
          
          # Collect all arguments for the java command
          eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
          
          exec "$JAVACMD" "$@"
          EOF
          
          # Make gradlew executable
          chmod +x gradlew
          
          # Download gradle-wrapper.jar
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.5.0/gradle/wrapper/gradle-wrapper.jar
          
          # Create root build.gradle
          cat > build.gradle << 'EOF'
          buildscript {
              ext.kotlin_version = '1.8.22'
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.1.4'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "${rootProject.buildDir}/${project.name}"
          }
          subprojects {
              project.evaluationDependsOn(':app')
          }
          
          tasks.register("clean", Delete) {
              delete rootProject.buildDir
          }
          EOF
          
          # Create settings.gradle
          cat > settings.gradle << 'EOF'
          pluginManagement {
              def flutterSdkPath = {
                  def properties = new Properties()
                  file("local.properties").withInputStream { properties.load(it) }
                  def flutterSdkPath = properties.getProperty("flutter.sdk")
                  assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
                  return flutterSdkPath
              }()
          
              includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")
          
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }
          
          plugins {
              id "dev.flutter.flutter-plugin-loader" version "1.0.0"
              id "com.android.application" version "8.1.4" apply false
              id "org.jetbrains.kotlin.android" version "1.8.22" apply false
          }
          
          include ":app"
          EOF
          
          # Create app/build.gradle
          cat > app/build.gradle << 'EOF'
          plugins {
              id "com.android.application"
              id "kotlin-android"
              id "dev.flutter.flutter-gradle-plugin"
          }
          
          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }
          
          def flutterRoot = localProperties.getProperty('flutter.sdk')
          if (flutterRoot == null) {
              throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
          }
          
          android {
              namespace "com.example.smart_trip_planner"
              compileSdk 34
              ndkVersion "25.1.8937393"
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          
              kotlinOptions {
                  jvmTarget = '1.8'
              }
          
              defaultConfig {
                  applicationId "com.example.smart_trip_planner"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode 1
                  versionName "1.0"
              }
              
              signingConfigs {
                  debug {
                      storeFile file('debug.keystore')
                      storePassword 'android'
                      keyAlias 'androiddebugkey'
                      keyPassword 'android'
                  }
              }
          
              buildTypes {
                  debug {
                      minifyEnabled false
                      shrinkResources false
                      debuggable true
                      signingConfig signingConfigs.debug
                  }
                  release {
                      minifyEnabled false
                      shrinkResources false
                      debuggable false
                      signingConfig signingConfigs.debug
                  }
              }
          }
          
          flutter {
              source '../..'
          }
          
          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.22"
          }
          EOF
          
          # Create debug keystore
          cd app
          keytool -genkey -v -keystore debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US" -noprompt
          
          cd ..
          echo "=== Android environment setup complete ==="
          echo "Files created:"
          ls -la
          echo "App directory:"
          ls -la app/
          echo "Gradle wrapper:"
          ls -la gradle/wrapper/
          
          # Test gradlew
          echo "Testing gradlew:"
          ./gradlew --version || echo "Gradlew test failed, but continuing..."
        
      - name: Generate Isar files
        script: |
          echo "=== Generating Isar schema files ==="
          flutter packages pub run build_runner build --delete-conflicting-outputs
        
      - name: Build APK
        script: |
          echo "=== Building APK ==="
          flutter build apk --release --verbose
          
      - name: Find and copy APK
        script: |
          echo "=== Looking for APK ==="
          find . -name "*.apk" -type f
          
          APK_DIR="android/app/build/outputs/apk/release"
          if [ -d "$APK_DIR" ]; then
            APK_FILE=$(find "$APK_DIR" -name "*.apk" | head -1)
            if [ -n "$APK_FILE" ]; then
              mkdir -p artifacts
              cp "$APK_FILE" artifacts/app-release.apk
              echo "✅ APK copied successfully!"
            fi
          fi
          
    artifacts:
      - artifacts/*.apk